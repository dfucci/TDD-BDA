---
title: "TDD-BDA"
execute: 
  echo: true
---

## (Re-)analysis of TDD experiments using BDA

The model should describe how TDD is (positively) associated with *developers' productivity* and *software quality.*

-   **Completed User stories in unit of time (CUS)** is a proxy for developers' productivity

-   **Number of functional bugs (FB)** is a proxy for software quality

-   **Compliance to TDD (TDD)** is the percentage of development cycles that followed TDD test-code-refactor

There are other by-products of **TDD:**

-   **Number of refactorings (REF)** is the amount of refactorings applied to the codey

-   **Number of unit test cases (TC)** is the amount of test cases produced

-   **Test cases code coverage (COV)** of the test cases

Developers' experience is a mediator (?) of the effect of TDD

-   **Years of Experience (EX)** in development

-   **Years of programming experience (EJ**) with the same programming language

-   **Familiarity with the IDE (EI)** relevant functionalities (running tests, creating test stubs, automated refactorings).

-   **Familiarity with the testing framework (ET)** and its API

```{r}
library(dagitty)
library(rethinking)
```

Causal assumptions are modeled using the following DAG

```{r}
TDD.dag <- dagitty("dag{
  TDD -> TC -> FB
  TDD -> FB
  TDD -> CUS
  TDD -> REF
  ET -> TC -> CUS
  EJ -> CUS
  EJ -> REF
  EX -> REF
  EX -> FB
  EX -> CUS
  EI -> REF
  EI -> CUS
}")
drawdag(TDD.dag)
```

⁄‹››Assumptions:

-   EX -\> CUS. Having worked on a similar problem makes a developer more productive

-   EX -\> REF. Developers have an eye for refactoring patterns

-   EX -\> FB. A more experience developer is less likely to introduce bugs

-   EI -\> CUS. A developer who knows the IDE is more productive as they make use of the IDE features (completion, snippets, etc)

-   EI -\> REF. A developer who knows the IDE can perform automated refactorings

-   EJ -\> CUS. A developer knows the language syntax and does not spend much time consulting documentation or fixing language-specific issues

-   EJ -\> REF. A developer knows language-specific refactorings

-   ET -\> TC. A developer who is familiar with the testing framework can produce more test cases

-   TC -\> FB. More test cases are likely to catch more bugs

-   TC -\> CUS. Test cases act as a safety net which makes a developer more productive

```{r}
 equivalentDAGs(TDD.dag)
 impliedConditionalIndependencies(TDD.dag)
```

## Simplified DAG

### (chosen for the project)

```{r}
TDD.dag.simplified <- dagitty("dag{
  TDD -> REF
  TDD -> CUS
  TDD -> FB
  TDD -> TC
  TC -> FB -> CUS <- REF
  COV -> FB
}")
drawdag(TDD.dag.simplified)
```

Here, I have included REF -\> CUS as a *cleaner* code base makes it easier to develop new features.

An alternative DAG can also include COV -\> REF, since a test suite which covers large part of the code base limits regression bugs when introducing refactorings.

```{r}
equivalent.dags <- equivalentDAGs(TDD.dag.simplified)
drawdag(equivalent.dags)
# impliedConditionalIndependencies(TDD.dag)
```

-   The second DAG (TC -\> TDD) is excluded, since there is no theory to support it---i.e., one can write a lots of unit tests, without necessarily applying TDD.

-   The third DAG (REF -\> TDD) is interesting. Performing refactorings *cleans* the code base, which in turn means it is easier to apply TDD or at least the production code necessary to fulfill the green step. In turn, refactoring is self-reinforcing---i.e., more refactoring -\> cleaner code -\> easier to apply new refactoring once code is added. Notice: this applies also to non-TDD way of writing production code.

-   As a results of the above, there could be a *unobserved* **CLEAN CODE (CC)** variable which influences both REF and TDD, each influencing CUS. This removes TDD -\> REF.

```{r}
TDD.dag.latent <- dagitty("dag{
  REF <- CC 
  CC -> TDD -> CUS
  TDD -> FB
  TDD -> TC
  TC -> FB -> CUS <- REF
  COV -> FB
}")    
latents(TDD.dag.latent) <- c("CC")
drawdag(TDD.dag.latent)
```

Are TC and REF source of post-treatment bias? TC and REF are consequences of the treatment TDD. Basically, the question I would ask the model would be *Once we already know weather REF and TC were done, does TDD matter?*

```{r}
impliedConditionalIndependencies(TDD.dag.simplified)
```

However, I am not worried since there is no CUS \_\|\|\_ TDD \| REF d-separation, due to TDD -\> CUS

```{r}
adjustmentSets(TDD.dag.simplified, exposure="TDD", outcome="CUS" )
adjustmentSets(TDD.dag.simplified, exposure="TDD", outcome="FB" )
```

There is no need to control on any of the variable. However, I need to decouple the graph related to FB and CUS. Ideally, FB the outcome of a sub-model, which needs to be computed, before addressing CUS (i.e., FB -\> CUS).

### A model of FB that does not consider CUS

For simplicity, I will start with the DAG which considers only a single outcome of interest *FB*.

```{r}
TDD.FB.only <- dagitty("dag{
  TDD -> REF
  TDD -> FB
  TDD -> TC
  TC -> FB 
  COV -> FB
}")
drawdag(TDD.FB.only)
```

## Modelling

$FB \sim Normal(\mu_{i}, \sigma)$  
$\mu_i = \alpha_i + TDD \times \beta_{TDD} + TC \times \beta_{TC} + COV \times \beta_{COV}$   
$\beta_{TDD} \sim Normal(\mu_{TDD}, \sigma_{TDD})$   
$\mu_{TDD} = a_{TDD} + REF \times \beta_{REF} + TC \times \beta_{TC}$  
$\alpha_{TDD} \sim Nomal(0,1)$  
$\beta_{REF} \sim Normal(1, 0.3)$   
$\beta_{TC} \sim Normal(4, 1)$   
$\sigma_{TDD} \sim Exponential(1)$   
$\beta_{COV} \sim Normal(1, 0.5)$  
$\sigma \sim Exponential(1)$  

### Prior analysis of TDD
```{r}
N <- 100
alpha_tdd <- rnorm(N, 0, 1)
beta_ref <- rnorm(N, 1, 0.3)
beta_tc <- rnorm(N, 4, 1)
plot(NULL, xlim=c(0,100), ylim=c(0,5))
for (i in 1:N)
  curve(rnorm(alpha_tdd[i] + beta_ref[i] * x + beta_tc[i] * x), add=TRUE)
```
